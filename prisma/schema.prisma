generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  email      String      @unique
  password   String
  prefix     String?
  firstName  String
  lastName   String
  avatar     String?
  role       Role
  student    Student?
  instructor Instructor?
}

model Student {
  id           String                  @id @default(cuid())
  registerDate String
  isAssistant  Boolean                 @default(false)
  user         User                    @relation(fields: [userID], references: [id])
  userID       String                  @unique
  assistant    StudentAssistsSection[]
  classes      StudentTakesSection[]
  assignments  StudentHasAssignment[]
}

model Instructor {
  id          String                     @id @default(cuid())
  officeHours String
  user        User                       @relation(fields: [userID], references: [id])
  userID      String                     @unique
  classes     InstructorTeachesSection[]
}

model Section {
  id            String                    @id @default(cuid()) // sectionNum-classID-term-year
  fullName      String?
  sectionNum    String
  term          String
  year          String
  schedule      String
  isOnline      Boolean                   @default(false)
  isSynchronous Boolean                   @default(true)
  isAvailable   Boolean                   @default(true)
  gradeWeight   Json[]
  class         Class?                    @relation(fields: [classID], references: [id])
  classID       String                    @unique
  instructors   InstructorTeachesSection?
  students      StudentTakesSection[]
  assistants    StudentAssistsSection[]
  assignments   SectionHasAssignment[]
  posts         SectionHasPost[]
}

model Class {
  id          String    @id @default(cuid())
  title       String
  description String
  department  String
  classNum    String
  creditHours Int
  sections    Section[]
}

model Assignment {
  id          String                 @id @default(cuid())
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  title       String
  description String?
  dueDate     String? // YYYY-MM-DD HH:mm:ss
  attachments String[] // _quiz_.md
  class       SectionHasAssignment?
  students    StudentHasAssignment[]
}

model Post {
  id          String          @id @default(cuid())
  title       String?
  body        String?
  attachments String[]
  class       SectionHasPost?
}

model StudentTakesSection {
  id         String   @id @default(cuid()) // studentID-sectionNum-classID-term-year
  finalGrade String?
  attendance Json[]
  student    Student? @relation(fields: [studentID], references: [id])
  studentID  String?
  section    Section? @relation(fields: [sectionID], references: [id])
  sectionID  String?
}

model StudentAssistsSection {
  id               String   @id @default(cuid()) // studentID-sectionNum-classID-term-year
  classPermissions String?
  student          Student? @relation(fields: [studentID], references: [id])
  studentID        String?
  section          Section? @relation(fields: [sectionID], references: [id])
  sectionID        String?
}

model InstructorTeachesSection {
  id           String      @id @default(cuid()) // instructorID-sectionNum-classID-term-year
  instructor   Instructor? @relation(fields: [instructorID], references: [id])
  instructorID String?
  section      Section?    @relation(fields: [sectionID], references: [id])
  sectionID    String?     @unique
}

model StudentHasAssignment {
  id                String      @id @default(cuid()) // studentID-assignmentID
  grade             String?
  comments          String?
  submitAttachments String[]
  isGraded          Boolean     @default(false)
  student           Student?    @relation(fields: [studentID], references: [id])
  studentID         String?
  assignment        Assignment? @relation(fields: [assignmentID], references: [id])
  assignmentID      String?
}

model SectionHasAssignment {
  id           String      @id @default(cuid()) // assignmentID-sectionNum-classID-term-year
  type         String?
  weight       Float?
  isHidden     Boolean     @default(false)
  section      Section?    @relation(fields: [sectionID], references: [id])
  sectionID    String?
  assignment   Assignment? @relation(fields: [assignmentID], references: [id])
  assignmentID String?     @unique
}

model SectionHasPost {
  id        String   @id @default(cuid()) // postID-sectionNum-classID-term-year
  isHidden  Boolean  @default(false)
  section   Section? @relation(fields: [sectionID], references: [id])
  sectionID String?
  Post      Post?    @relation(fields: [postID], references: [id])
  postID    String?  @unique
}

enum Role {
  ADMIN
  STUDENT
  INSTRUCTOR
}
