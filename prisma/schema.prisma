generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  email      String      @unique
  password   String
  prefix     String
  firstName  String
  lastName   String
  avatar     String?
  role       Role        @default(USER)
  student    Student?
  Instructor Instructor?
  Assistant  Assistant?
}

model Student {
  studentID    String                 @id @default(cuid())
  registerDate DateTime               @default(now())
  user         User                   @relation(fields: [userID], references: [id])
  userID       String                 @unique
  classes      StudentTakesClass[]
  assignments  StudentHasAssignment[]
}

model Instructor {
  instructorID String                   @id @default(cuid())
  officeHours  String
  user         User                     @relation(fields: [userID], references: [id])
  userID       String                   @unique
  classes      InstructorTeachesClass[]
}

model Assistant {
  assistantID String                  @id @default(cuid())
  user        User                    @relation(fields: [userID], references: [id])
  userID      String                  @unique
  classes     AssistantTeachesClass[]
}

model Class {
  classID     String                  @id @default(cuid())
  department  String
  term        String
  name        String
  description String?
  isOnline    Boolean                 @default(false)
  schedule    String?
  attendance  Json?
  students    StudentTakesClass[]
  instructors InstructorTeachesClass?
  assistants  AssistantTeachesClass[]
  assignments ClassHasAssignment[]
  posts       ClassHasPost[]
}

model Assignment {
  assignmentID String                 @id @default(cuid())
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  title        String
  description  String?
  dueDate      DateTime //yyyy-mm-dd
  attachments  String? //_quiz_.md
  students     StudentHasAssignment[]
  class        ClassHasAssignment?
}

model Post {
  postID      String        @id @default(cuid())
  title       String?
  body        String?
  attachments String?
  class       ClassHasPost?
}

model StudentTakesClass {
  id         String   @id @default(cuid()) // studentID + classID
  finalGrade String?
  Student    Student? @relation(fields: [studentID], references: [studentID])
  studentID  String?
  Class      Class?   @relation(fields: [classID], references: [classID])
  classID    String?
}

model InstructorTeachesClass {
  id           String      @id @default(cuid()) // instructorID + classID
  Instructor   Instructor? @relation(fields: [instructorID], references: [instructorID])
  instructorID String?
  Class        Class?      @relation(fields: [classID], references: [classID])
  classID      String?     @unique
}

model AssistantTeachesClass {
  id               String     @id @default(cuid()) // assistantID + classID
  classPermissions String
  Assistant        Assistant? @relation(fields: [assistantID], references: [assistantID])
  assistantID      String?
  Class            Class?     @relation(fields: [classID], references: [classID])
  classID          String?
}

model StudentHasAssignment {
  id           String      @id @default(cuid()) // studentID + assignmentID
  grade        String?
  comments     String?
  attachments  String?
  Student      Student?    @relation(fields: [studentID], references: [studentID])
  studentID    String?
  Assignment   Assignment? @relation(fields: [assignmentID], references: [assignmentID])
  assignmentID String?
}

model ClassHasAssignment {
  id           String      @id @default(cuid()) // classID + assignmentID
  isHidden     Boolean     @default(true)
  Class        Class?      @relation(fields: [classID], references: [classID])
  classID      String?
  Assignment   Assignment? @relation(fields: [assignmentID], references: [assignmentID])
  assignmentID String?     @unique
}

model ClassHasPost {
  id       String  @id @default(cuid()) // classID + postID
  isHidden Boolean @default(true)
  Class    Class?  @relation(fields: [classID], references: [classID])
  classID  String?
  Post     Post?   @relation(fields: [postID], references: [postID])
  postID   String? @unique
}

enum Role {
  ADMIN
  USER
}
